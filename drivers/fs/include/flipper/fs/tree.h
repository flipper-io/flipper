#ifndef __tree_h__
#define __tree_h__

/* Include all types and macros exposed by the Flipper Toolbox. */
#include <flipper/core.h>

/* This macro is used to compute the offset of a member of a leaf located at a given fsp. */
#define forward(pointer, structure, member) ((fsp)(pointer + offsetof(structure, member)))

/* An abstract data structure used to represent members of the filesystem tree. */
typedef struct __attribute__((__packed__)) _leaf {
	
	/* A key used to identify the leaf. Generated by checksumming the name of the directory/file. */
	uint16_t key;
	
	/* The size of the data pointed to by the leaf. */
	uint32_t size;
	
	/* The data pointed to by the leaf. */
	fsp data;
	
	/* The in-system address at which the data has been loaded. */
	uint32_t address;
	
	/* A pointer that points to the child pointer of the parent that points to this leaf. :) */
	fsp _branch;
	
	/* A pointer to the leftmost child of the leaf. */
	fsp left;
	
	/* A pointer to the rightmost child of the leaf. */
	fsp right;
	
} leaf;

/* Declare all necessary private driver functions. */
fsp fs_add_leaf_with_key(fsp current, uint16_t key);
fsp fs_leaf_for_key(fsp current, uint16_t key);
void fs_remove_leaf_with_key(fsp parent, uint16_t key);

#endif
